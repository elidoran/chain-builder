// Generated by CoffeeScript 1.12.5

/*
  Control manages a single execution process for a Chain and provides advanced
  functionality to the functions called in the chain.
 */
var Control;

module.exports = Control = (function() {
  function Control(_chain, _array, _context, _done) {
    this._chain = _chain;
    this._array = _array;
    this._context = _context;
    this._done = _done;
    this._index = -1;
  }

  Control.prototype._resume = function() {
    var result, results;
    this.paused = null;
    if (this.failed == null) {
      this._chain.emit('resume', {
        chain: this._chain
      });
      result = this._execute();
    } else {
      result = false;
    }
    results = this._chain._finish(result, this);
    return results;
  };

  Control.prototype._resumeCallback = function(errorMessage, resultKey) {
    var control, resumer;
    if (errorMessage == null) {
      errorMessage = 'ERROR';
    }
    if (resultKey == null) {
      resultKey = 'result';
    }
    resumer = this;
    control = resumer.control;
    return function(err, res) {
      if (err != null) {
        control.fail(errorMessage, err);
      } else {
        control._context[resultKey] = res;
      }
      return resumer();
    };
  };

  Control.prototype.next = function(context, permanent) {
    var index, result;
    if (permanent) {
      this._context = context;
    }
    if (this.__index != null) {
      index = this._index = this.__index;
      delete this.__index;
    } else {
      index = this._index;
    }
    result = this._execute(context);
    this.__index = index;
    return result;
  };

  Control.prototype.context = function(context, permanent) {
    if (permanent) {
      this._context = context;
    } else {
      this._nextContext = context;
    }
  };

  Control.prototype._execute = function(context) {

    /* !pragma coverage-skip-next */
    var array, control, e, fn, fnThis, index, reason, ref, ref1, ref2, ref3, ref4, ref5, result;
    if (this.paused != null) {
      throw new Error('paused, can not perform _execute()');
    }

    /* !pragma coverage-skip-next */
    if (this.stopped != null) {
      throw new Error('stopped, can not perform _execute()');
    }

    /* !pragma coverage-skip-next */
    if (this.failed != null) {
      throw new Error('failed, can not perform _execute()');
    }
    while (true) {
      if (this._remove != null) {
        reason = this._remove;
        delete this._remove;
        fn = this._array.splice(this._index, 1);
        if (this.removed == null) {
          this.removed = [];
        }
        this.removed.push(fn[0]);
        this._chain.emit('remove', {
          removed: fn,
          reason: reason,
          chain: this._chain
        });
      } else {
        this._index++;
        while (((ref = this._array) != null ? (ref1 = ref[this._index]) != null ? (ref2 = ref1.options) != null ? ref2.disabled : void 0 : void 0 : void 0) != null) {
          this._index++;
        }
      }
      index = this._index;
      array = this._array;
      if (index < array.length) {
        try {
          control = this;
          fn = array[index];
          context = (ref3 = context != null ? context : this._nextContext) != null ? ref3 : this._context;
          this._nextContext = null;
          fnThis = (ref4 = fn != null ? (ref5 = fn.options) != null ? ref5["this"] : void 0 : void 0) != null ? ref4 : context;
          result = fn.call(fnThis, control, context);
          context = null;
        } catch (error1) {
          e = error1;
          return control.fail('caught error', e);
        }
        if ((result != null ? result.error : void 0) != null) {
          return result;
        }
        if ((this.paused != null) || (this.stopped != null) || (this.failed != null)) {
          return result;
        }
      } else {
        return true;
      }
    }
  };

  Control.prototype.pause = function(reason) {
    var resumer;
    this.paused = {
      reason: reason,
      index: this._index,
      fn: this._array[this._index]
    };
    this._chain.emit('pause', {
      paused: this.paused,
      chain: this._chain
    });
    resumer = this._resume.bind(this);
    resumer.control = this;
    resumer.callback = this._resumeCallback;
    return resumer;
  };

  Control.prototype.stop = function(reason) {
    var result;
    this.stopped = {
      reason: reason,
      index: this._index,
      fn: this._array[this._index]
    };
    result = {
      context: this._context,
      stopped: this.stopped,
      chain: this._chain
    };
    this._chain.emit('stop', result);
    return true;
  };

  Control.prototype.fail = function(reason, error) {
    var result;
    this.failed = {
      reason: reason,
      index: this._index,
      fn: this._array[this._index]
    };
    if (error != null) {
      this.failed.error = error;
    }
    result = {
      context: this._context,
      failed: this.failed,
      chain: this._chain
    };
    this._chain.emit('fail', result);
    return false;
  };

  Control.prototype.remove = function(reason) {
    if (reason == null) {
      reason = true;
    }
    this._remove = reason;
    return true;
  };

  Control.prototype.disable = function(reason) {
    if (reason == null) {
      reason = true;
    }
    return this._chain._disable(this._array[this._index], this._index, reason);
  };

  return Control;

})();
