// Generated by CoffeeScript 1.12.5
var Chain, Control, getOptions,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  slice = [].slice;

getOptions = require('./get-options');

Control = require('./control');


/*
  Chain holds an array of functions to execute in sequence managed by a Control.
 */

module.exports = Chain = (function(superClass) {
  extend(Chain, superClass);

  function Chain(options) {
    var array;
    if (options != null ? options.__validated : void 0) {
      array = options.array;
    } else {
      options = getOptions(options);
      if ((options != null ? options.error : void 0) != null) {
        throw new Error(options.error);
      }
      array = options.array;
    }
    this.array = array;
    this._base = options != null ? options.base : void 0;
    this._props = options != null ? options.props : void 0;
    if ((options != null ? options.buildContext : void 0) != null) {
      this._originalBuildContext = this._buildContext;
      this._buildContext = options.buildContext;
    }
    return;
  }

  Chain.prototype.add = function() {
    var fn, fns, j, len, length, ref, result;
    fns = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    if (Array.isArray(fns != null ? fns[0] : void 0)) {
      fns = fns[0];
    }
    length = this.array.length;
    for (j = 0, len = fns.length; j < len; j++) {
      fn = fns[j];
      if ('function' !== typeof fn) {
        return {
          error: 'must be a function',
          fn: fn
        };
      }
    }
    (ref = this.array).splice.apply(ref, [this.array.length, 0].concat(slice.call(fns)));
    result = {
      result: true,
      added: fns,
      chain: this
    };
    if (length !== this.array.length) {
      this.emit('add', result);
    }
    return result;
  };

  Chain.prototype.remove = function(which, reason) {
    var index;
    index = this._findIndex(which);
    if ((index != null ? index.error : void 0) != null) {
      return index;
    }
    return this._remove(null, index, reason);
  };

  Chain.prototype._remove = function(_, index, reason) {
    var result;
    if (reason == null) {
      reason = true;
    }
    result = {
      result: false,
      reason: reason,
      chain: this
    };
    if (index > -1) {
      result.removed = this.array.splice(index, 1);
      result.result = true;
      this.emit('remove', result);
    } else {
      result.reason = 'not found';
    }
    return result;
  };

  Chain.prototype.disable = function(which, reason) {
    var fn, index, result;
    if (arguments.length === 0 || (arguments.length === 1 && typeof which === 'string')) {
      reason = which != null ? which : true;
      this._disabled = reason;
      result = {
        result: true,
        reason: reason,
        chain: this
      };
      this.emit('disable', result);
      return result;
    }
    index = this._findIndex(which);
    if ((index != null ? index.error : void 0) != null) {
      return index;
    }
    fn = this.array[index];
    return this._disable(fn, index, reason);
  };

  Chain.prototype._disable = function(fn, _, reason) {
    var result;
    if (reason == null) {
      reason = true;
    }
    if (fn.options != null) {
      fn.options.disabled = reason;
    } else {
      fn.options = {
        disabled: reason
      };
    }
    result = {
      result: true,
      fn: fn,
      reason: reason,
      chain: this
    };
    this.emit('disable', result);
    return result;
  };

  Chain.prototype.enable = function(which) {
    var fn, index, result;
    if (arguments.length === 0) {
      result = {
        result: false,
        chain: this
      };
      if (this._disabled != null) {
        delete this._disabled;
        result.result = true;
        this.emit('enable', result);
      } else {
        result.reason = 'chain not disabled';
      }
      return result;
    } else {
      index = this._findIndex(which);
      if ((index != null ? index.error : void 0) != null) {
        return index;
      }
      fn = this.array[index];
      return this._enable(fn);
    }
  };

  Chain.prototype._enable = function(fn) {
    var ref, ref1, result;
    result = {
      result: false,
      fn: fn,
      chain: this
    };
    if ((fn != null ? (ref = fn.options) != null ? ref.disabled : void 0 : void 0) != null) {
      if (fn != null) {
        if ((ref1 = fn.options) != null) {
          delete ref1.disabled;
        }
      }
      result.result = true;
      this.emit('enable', result);
    } else {
      result.reason = 'function not disabled';
    }
    return result;
  };

  Chain.prototype._findIndex = function(which) {
    var fn, i, j, len, ref, ref1;
    switch (typeof which) {
      case 'string':
        ref = this.array;
        for (i = j = 0, len = ref.length; j < len; i = ++j) {
          fn = ref[i];
          if (which === (fn != null ? (ref1 = fn.options) != null ? ref1.id : void 0 : void 0)) {
            return i;
          }
        }
        return -1;
      case 'number':
        if ((0 <= which && which < this.array.length)) {
          return which;
        } else {
          return {
            error: 'Invalid index: ' + which
          };
        }
        break;
      case 'function':
        return this.array.indexOf(which);
      default:
        return {
          error: 'Requires a string (ID), an index, or the function',
          which: which
        };
    }
  };

  Chain.prototype.clear = function() {
    var array, result;
    result = {
      result: false,
      chain: this
    };
    if (this.array.length > 0) {
      array = this.array;
      this.array = [];
      result.result = true;
      result.removed = array;
      this.emit('clear', result);
    } else {
      result.result = true;
      result.reason = 'chain empty';
    }
    return result;
  };

  Chain.prototype._actor = function() {
    var action, args, chain, diff, fn, index, j, len, length, ref, result, results, selector;
    selector = arguments[0], action = arguments[1], args = 3 <= arguments.length ? slice.call(arguments, 2) : [];
    chain = this;
    args.splice(0, 0, '', '');
    length = chain.array.length;
    index = 0;
    results = [];
    ref = chain.array;
    for (j = 0, len = ref.length; j < len; j++) {
      fn = ref[j];
      if (selector(fn, index)) {
        args[0] = fn;
        args[1] = index;
        result = action.apply(chain, args);
        diff = chain.array.length - length;
        index += diff;
        length = chain.array.length;
        results.push(result);
      }
      index++;
    }
    return {
      result: true,
      results: results
    };
  };

  Chain.prototype.select = function(selector) {
    var chain, error, ops, returnError;
    if (typeof selector !== 'function') {
      error = {
        error: 'Selector must be an index, id, or filter function',
        selector: selector
      };
      returnError = function() {
        return error;
      };
      return ops = {
        selector: selector,
        error: error.error,
        disable: returnError,
        enable: returnError,
        remove: returnError,
        affect: returnError
      };
    }
    chain = this;
    return ops = {
      disable: this._actor.bind(chain, selector, chain._disable),
      enable: this._actor.bind(chain, selector, chain._enable),
      remove: this._actor.bind(chain, selector, chain._remove),
      affect: this._actor.bind(chain, selector)
    };
  };

  Chain.prototype.run = function(options, done) {
    var control, ctx, ref, result, results;
    if (this._disabled != null) {
      return {
        result: false,
        reason: 'chain disabled',
        disabled: this._disabled
      };
    }
    ctx = this._buildContext(options);
    done = (ref = options != null ? options.done : void 0) != null ? ref : done;
    control = new Control(this, this.array, ctx, done);
    this.emit('start', {
      control: control,
      chain: this
    });
    result = control._execute();
    if (control.paused != null) {
      results = {
        paused: control.paused
      };
    } else {
      results = this._finish(result, control);
    }
    return results;
  };

  Chain.prototype._finish = function(result, control) {
    var error, ref, results;
    results = {
      result: result,
      context: control._context,
      chain: this
    };
    if (control.stopped != null) {
      results.stopped = control.stopped;
    }
    if (control.failed != null) {
      results.failed = control.failed;
    }
    if (control.removed != null) {
      results.removed = control.removed;
    }
    error = (ref = result.error) != null ? ref : results.failed;
    if (typeof control._done === "function") {
      control._done(error, results);
    }
    this.emit('done', error, results);
    return results;
  };

  Chain.prototype._buildContext = function(options) {
    var base, props, ref, ref1, ref2;
    if ((options != null ? options.context : void 0) != null) {
      return options.context;
    } else {
      base = (ref = (ref1 = options != null ? options.base : void 0) != null ? ref1 : this._base) != null ? ref : {};
      props = (ref2 = options != null ? options.props : void 0) != null ? ref2 : this._props;
      return Object.create(base, props);
    }
  };

  return Chain;

})(require('events').EventEmitter);
